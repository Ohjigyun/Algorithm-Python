- 수 자료형의 연산
몫을 얻기 위한 연산자 //
거듭 제곱 연산자 **

- 배열(리스트)
# 크기가 n이고 모든값이 0 인 1차원 리스트 초기화
n = 10
a = [0] * n
=>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# 인덱싱과 슬라이싱
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
뒤에서 첫 번째 원소 a[-1] // 10
뒤에서 세 번째 원소 a[-3] // 8
두 번째 원소부터 네 번째 원소까지 a[ 1: 4 ] // [2,3,4]

# 리스트 컴프리헨션
array = [i for i in range(10)]
//[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

0부터 19까지의 수 중 홀수만 포함하는 리스트
array = [i for i in range(20) if i%2 === 1]
//[1, 3, 5, 7, 9, 11 ,13, 15 ,17, 19 ]

2차원 리스트를 한 번에 초기화 할 때( n X m 크기)
array = [[0] * m for _ in range(n)]
//반복을 수행하되 반복을 위한 변수를 무시할 때 _ 를 사용한다
ex) for _ in range(5):
        print("Hello World")

# 리스트 메서드
append : 원소를 삽입 (O(1))
sort() : 원소를 정렬 (O(NlogN)) // 내림차순은 sort(reverse = True)
reverse() : 원소를 뒤집어 놓는다 (O(N))
insert(idx, value) : idx위치에 value를 삽입 (O(N))
count(value) : 특정한 값을 가지는 데이터의 갯수를 센다(O(N))
remove(value) : 특정한 값을 가지는 데이터를 하나만 제거(O(N))

#리스트에서 특정 값을 가지는 원소를 모두 제거하기
a = [1, 2, 3, 4, 5 , 5, 5]
remove_set = {3, 5}

result = [i for i in a if i not in remove_set]
//[1, 2, 4]

# 튜플 자료형
튜플은 한 번 선언된 값을 변경할 수 없다.
튜플은 소괄호를 사용한다.
튜플은 리스트에 비해 메모리가 작다.
a = (1,2,3,4,5,6,7,8,9)
a[3] // 4
a[1:4] // (2,3,4)
a[2] = 7 // 리스트와 달리 변경할 수 없어 에러 출력

튜플을 사용하면 좋을 때
서로 다른 성질의 데이터를 묶어서 관리할 때
데이터의 나열을 해싱의 키 값으로 사용할 때
리스트보다 메모리를 효율적으로 사용해야 할 때

# 사전 자료형
data = dict()
data['사과'] = 'apple'
data['바나나'] = 'banana'
data
// {'사과' : 'apple' , '바나나' : 'banana'}
data.keys()
// dict_keys(['사과' , '바나나'])
list(data.keys())
// ['사과' , '바나나']

# 집합 자료형
data = set([1, 1, 2, 3 , 4 , 4 , 5])
//{ 1 , 2 , 3 , 4 , 5 }
data = {1 , 1 , 2 , 3 , 4 , 4 , 5 }
// {1, 2, 3, 4, 5}

집합 메서드
.add(value) : 새로운 원소를 추가
.update([6, 7]) : 새로운 원소 여러개를 추가
.remove(value) : value값을 갖는 원소 삭제

리스트나 튜플은 순서가 있어 인덱싱을 통해 값을 얻을 수 있다.
사전이나 집합은 순서가 없어 인덱싱으로 값을 얻을 수 없다.
키나 집합의 원소를 이용해 O(1)의 시간 복잡도로 조회한다.

빠르게 입력 받기
import sys
data = sys.stdin.readline().rstrip()

f-string
문자열 앞에 접두사 f를 붙여 사용하면 문자열과 정수를 함께 넣을 수 있다.
answer = 7
print(f"정답은 {answer}입니다.")
//정답은 7입니다.

# 논리 연산자
X and Y (Js에서의 &&) 
X or Y (Js에서의 ||) 
not X  (Js에서의 !)

pass 키워드
아무것도 처리하고 싶지 않을 때 pass 키워드를 사용
(조건문의 형태만 만들어놓고 조건문을 처리하는 부분을 비워두고 싶은 경우)

파이썬의 경우 조건문에서 부등식을 다음과 같이 사용할 수 있다.
x = 15
if x > 0 and x < 20:
    print("Hello World")

if 0 < x < 20:
    print("Hello World")

위 두 조건문이 같은 결과를 반환하지만 다른 프로그래밍 언어에서
모두 전자의 방법을 사용하므로 파이썬에서도 전자를 사용하도록 한다.


# for 루프
연속적인 값을 차례대로 순회할 때는 range()를 자주 사용한다.
range(시작값 , 끝값) 하나만 입력하면 시작값은 0이 된다.
끝값은 원하는것보다 +1해서 입력

# 함수 
같은 코드를 반복적으로 사용하여야 할 때 함수를 사용하면 좋다.

def 함수명(매개 변수):
    실행할 소스코드
    return 반환 값

ex)
def add(a, b):
    return a+b

print('함수의 결과',add(3, 7)) // 함수의 결과 10

 global
global 키워드를 사용하면 해당 함수에서 지역 변수를 만들지 않고
함수 바깥에 선언된 변수를 사용한다.

파이썬에서 함수는 여러개의 리턴을 가질 수 있다.
def operator(a,b):
    add_var = a+b
    subtract_var = a-b
    multiply_var = a*b
    divide_var = a/b
    return add_var , subtract_var, multiply_var, divide_var

a, b, c, d = operator(7,3) // a= 10 b = 4 c = 21 d = 2.333

람다 표현식
print((lambda a, b: a+b)(3,7)) // 10
예시 1)
array =[('홍길동' , 50) , ('이순신', 32) , ('아무개', 74)]

def my_key(x):
    return x[1]

print(sorted(array, key = my_key)) // 오름차순으로 정렬해 출력
print(sorted(array, key = lambda x: x[1])) // 오름차순으로 정렬해 출력

예시 2)
list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 10]

result = map(lambda a,b : a+b , list1, list2)
print(list(result)) // [7, 9, 11, 13, 15]


#실전에서 유용한 라이브러리
itertools : 파이썬에서 반복되는 형태의 데이터를 처리하기 위한 기능 제공
ex ) 순열과 조합 라이브러리
heapq : 힙 자료구조 제공
ex ) 우선순위 큐 기능을 구현하기 위해 사용, 최단 거리 다익스트라
bisect : 이진 탐색 기능을 제공
collections : 덱, 카운터 등의 자료구조

# 내장 함수
sum([1,2,3,4,5]) // 15
min(7,3,5,2) // 2
max(7,3,5,2) // 7
eval("(3+5)*7") // 56
sorted([9, 1, 8 , 5 , 4]) // [1,4,5,8,9]
sorted([9, 1, 8 , 5 , 4], reverse=True) // [9,8,5,4,1]

array = [('홍길동' , 35),('이순신', 75),('아무개' , 50)]
result = sorted(array , key=lambda x: x[1], reverse = True)
// [('이순신' , 75),('아무개', 50),('홍길동',35)]

# itertools
from itertools import product
//중복 순열
data = ['A' , 'B' , 'C']
result = list(product(data, repeat =2)) // 2개를 뽑는 모든 순열 구하기

//중복 조합
from itertools import combinations_with_replacement
data = ['A', 'B' , 'C']
result = list(combinations_with_replacement(data, 2)) // 2개를 뽑는 모든 조합 구하기

# counter
from collections import Counter
counter = Counter(['red', 'blue', 'red', 'green', 'blue' , 'blue'])
dict(counter) // {'red' : 2, 'blue' : 3, 'green': 1}

# math
import math
//최소 공배수
def lcm(a,b) :
    return a*b // math.gcd(a,b)
// a*b // math.gcd(a,b)에서 //는 몫을 구하는 연산자

math.gcd(21, 14) // 7
lcm(21, 14) // 42


알고리즘에서 자주 사용되는 표준 입력 방법
공백을 기준으로 구분된 데이터를 입력 받을 때 다음과 같이 사용한다.
list( map( int , input().split() ))
공백을 기준으로 구분된 데이터의 개수가 많지 않다면 다음과 같이 사용한다.
a, b, c = map(int, input().split())