# 스택
선입 후출의 자료 구조
5 , 2 , 3 , 7, 삭제 , 1, 4 , 삭제의 스택을 구현하면

stack.append(5)
stack.append(2)
stack.append(3)
stack.append(7)
stack.pop()
stack.append(1)
stack.append(4)
stack.pop()
print(stack[::-1]) 
// 스택의 최상단 원소부터 출력 [1, 3, 2, 5]
print(stack) 
// 스택의 최하단 원소부터 출력 [5, 2, 3, 1]

# 큐
선입 선출의 자료 구조
5 , 2 , 3 , 7 , 삭제 , 1 , 4 , 삭제의 큐를 구현하면

from collections import deque
queue = deque()

queue.append(5)
queue.append(2)
queue.append(3)
queue.append(7)
queue.popleft()
queue.append(1)
queue.append(4)
queue.popleft()

print(queue)
// 먼저 들어온 순서대로 출력 deque([3,7,1,4])
queue.reverse()
print(queue)
// 나중에 들어온 원소부터 출력 deque([4,1,7,3])

# 재귀 함수
종료 조건을 제대로 명시하지 않으면 함수가 무한히 호출되므로
반드시 종료 조건을 명시해야한다.

def recursive_function(i):
    if i == 100:
        return
    print(i, '번째 재귀함수에서',i+1,'번째 재귀함수를 호출합니다.')
    recursive_fuction(i+1)
    print(i, '번째 재귀함수를 종료합니다.')
recursive_function(1) 
//100번째까지 호출하고 스택에 쌓인 순서대로 종료된다.

예시) 팩토리얼 구현 예제
def factorial_recursive(n):
    if n <= 1:
        return 1
    return n * factorial_recursive(n -1 )

예시) 최대 공약수 계산 (GCD) - 유클리드 호제법
def gcd(a,b):
    if a % b == 0:
        return b
    else:
        return gcd(b , a % b)
print(gcd(192,162)) // 6

# 재귀 함수의 유의사항
재귀 함수는 반복문보다 유리한 경우도 있고 불리한 경우도 있다.
컴퓨터가 함수를 연속적으로 호출하면 컴퓨터 메모리 내부의 스택 프레임에 쌓인다.
그래서 스택을 사용해야 할 때 구현상 스택 라이브러리 대신 재귀 함수를 이용하는 경우가 많다(dfs)


# DFS (깊이 우선 탐색)
dfs는 스택 자료 구조를(혹은 재귀 함수) 이용하며 구체적인 동작 과정은 다음과 같다.
1. 탐색 시작 노드를 스택에 삽입하고 방문 처리 한다.
2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 노드를 스택에 넣고 방문처리한다.
   방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다.
3. 더 이상 2번의 과정을 수행할 수 없을 때까지 반복한다.

예시)
def dfs(graph, v, visited):
    visited[v] = True
    print(v, end =' ')
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i , visited)

graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

visited = [False] * 9
dfs(graph, 1 , visited)
// 1 2 7 6 8 3 4 5

# BFS(너비 우선 탐색)
bfs는 큐 자료구조를 이용하며 구체적인 동작 과정은 다음과 같다.
1. 탐색 시작 노드를 큐에 삽입하고 방문 처리를 합니다.
2. 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은
   노드를 모두 큐에 삽입하고 방문처리합니다.
3. 더 이상 2번의 과정을 수행할 수 없을 때까지 반복합니다.

예시)

from collections import deque

def bfs(graph, start, visited):
    queue = deque([start])
    visited[start] = True
    while queue:
        v = queue.popleft()
        print(v, end = ' ')
        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i] = True

graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

visited = [False] * 9

bfs(graph, 1, visited)
//1 2 3 8 7 4 5 6